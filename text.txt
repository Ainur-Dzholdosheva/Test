#Композиция и наследование это две важные концепции в объектно-ориентированном программировании, которые моделируют отношения между двумя классами. Они являются строительными блоками объектно-ориентированного проектирования

#Итератор (iterator) - это объект, который возвращает свои элементы по одному за раз. С точки зрения Python - это любой объект, у которого есть метод __next__ . Этот метод возвращает следующий элемент, если он есть, или возвращает исключение StopIteration, когда элементы закончились.

#Генераторы. Генератор — это объект, который сразу при создании не вычисляет значения всех своих элементов.
#Он хранит в памяти только последний вычисленный элемент, правило перехода к следующему и условие, при котором выполнение прерывается.
#Вычисление следующего значения происходит лишь при выполнении метода next(). Предыдущее значение при этом теряется.

Метакласс чаще всего используется как фабрика классов. Подобно тому, как вы создаете экземпляр класса, вызывая класс, Python создает новый класс (когда он выполняет оператор 'class'), вызывая метакласс. В сочетании с обычными методами __init__ и __new__ метаклассы, таким образом, позволяют создавать "дополнительные вещи" при создании класса, такие как регистрация нового класса в каком-либо реестре или даже полностью заменить класс чем-то другим


В Python так называемые миксины — это классы, которые живут в обычном дереве наследования, но они остаются небольшими, чтобы избежать создания иерархий, которые слишком сложны для понимания программистом. В частности, миксины не должны иметь общих предков, кроме объекта, с другими родительскими классами.